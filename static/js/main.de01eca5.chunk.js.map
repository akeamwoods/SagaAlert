{"version":3,"sources":["store/actions.ts","store/saga.js","store/index.tsx","store/rootSaga.ts","style.tsx","components/NotificationContainer/style.tsx","components/NotificationContainer/index.tsx","index.tsx"],"names":["actions","alertCreated","createAction","alertDisplayed","alertCancelButtonClicked","alertCleared","cancellationSaga","addAlertSaga","id","take","payload","put","duration","race","delay","click","console","log","AlertPosition","rootSaga","all","takeEvery","getType","sagaMiddleware","createSagaMiddleware","store","createStore","state","alerts","action","produce","draft","type","filter","alert","composeWithDevTools","applyMiddleware","run","useTypedSelector","useSelector","Form","styled","form","AlertBox","div","AlertBoxLeft","AlertBoxRight","NotificationContainer","dispatch","useDispatch","transition","useTransition","item","unique","trail","length","from","opacity","transform","enter","leave","e","position","Left","map","props","key","style","Alert","dismissible","IconButton","color","size","onClick","fontSize","AlertTitle","title","message","Right","App","positions","Object","keys","value","isNaN","Number","useForm","defaultValues","durationAllowed","control","handleSubmit","watch","className","Box","display","alignItems","minHeight","flexDirection","margin","Typography","variant","align","component","gutterBottom","paragraph","onSubmit","data","uuid","undefined","background","FormControl","FormLabel","marginBottom","name","defaultValue","render","onChange","TextField","placeholder","fullWidth","InputLabelProps","shrink","justifyContent","FormControlLabel","Checkbox","checked","target","label","FormHelperText","disabled","Select","index","MenuItem","Button","rootElement","document","getElementById"],"mappings":"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","file":"static/js/main.de01eca5.chunk.js","sourcesContent":["import { ActionType, createAction } from \"typesafe-actions\";\nimport { Alert } from \".\";\n\nconst alertCreated = createAction(\"alert created\")<Alert>();\nconst alertDisplayed = createAction(\"alert displayed\")<Alert>();\nconst alertCancelButtonClicked = createAction(\"alert cancel button clicked\")<\n  string\n>();\nconst alertCleared = createAction(\"alert cleared\")<string>();\n\nexport const actions = {\n  alertCreated,\n  alertDisplayed,\n  alertCancelButtonClicked,\n  alertCleared\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import { put, delay, take, race } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\n\nfunction* cancellationSaga(id) {\n  while (true) {\n    const { payload } = yield take(actions.alertCancelButtonClicked);\n    if (id === payload) return;\n  }\n}\n\nexport function* addAlertSaga({ payload }) {\n  try {\n    yield put(actions.alertDisplayed(payload));\n    if (payload.duration) {\n      yield race({\n        delay: delay(payload.duration),\n        click: cancellationSaga(payload.id)\n      });\n    } else {\n      yield race({\n        click: cancellationSaga(payload.id)\n      });\n    }\n\n    yield put(actions.alertCleared(payload.id));\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore, applyMiddleware } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { rootSaga } from \"./rootSaga\";\n\nexport enum AlertPosition {\n  Right = 0,\n  Left = 1,\n}\nexport type Alert = {\n  id: string;\n  title: string;\n  message: string;\n  duration: number | undefined;\n  dismissible: boolean;\n  position: AlertPosition;\n};\n\nconst initialState = () => ({\n  alerts: [] as Alert[],\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case getType(actions.alertDisplayed):\n        draft.alerts = [...draft.alerts, action.payload];\n        break;\n      case getType(actions.alertCleared):\n        draft.alerts = draft.alerts.filter(\n          (alert) => alert.id !== action.payload\n        );\n        break;\n    }\n  });\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","import { getType } from \"typesafe-actions\";\nimport { all, takeEvery } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\nimport { addAlertSaga } from \"./saga\";\n\nexport function* rootSaga() {\n  yield all([takeEvery(getType(actions.alertCreated), addAlertSaga)]);\n}\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\n// max-width: 330px;\n// margin: 0 auto;\n// display: flex;\n// flex-direction: column;\n// background: white;\n// padding: 20px;\n// margin-top: 30px;\n\nexport const Form = styled.form`\n  padding: 20px;\n  display: grid;\n  box-shadow: 1px 7px 14px -5px rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n  color: rgba(42, 42, 42, 1);\n  max-width: 330px;\n`;\n","import styled from \"styled-components\";\n\nconst AlertBox = styled.div`\n  position: absolute;\n  top: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const AlertBoxLeft = styled(AlertBox)`\n  align-items: flex-start;\n  left: 0;\n`;\nexport const AlertBoxRight = styled(AlertBox)`\n  align-items: flex-end;\n  right: 0;\n`;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { AlertPosition, useTypedSelector } from \"../../store\";\nimport { actions } from \"../../store/actions\";\nimport { AlertBoxLeft, AlertBoxRight } from \"./style\";\nimport { useTransition, animated } from \"react-spring\";\n\nexport const NotificationContainer = () => {\n  const dispatch = useDispatch();\n  const alerts = useTypedSelector((state) => state.alerts);\n  const transition = useTransition(alerts, (item) => item.id, {\n    unique: true,\n    trail: 400 / alerts.length,\n    from: { opacity: 0, transform: \"scale(0.7)\" },\n    enter: { opacity: 1, transform: \"scale(1)\" },\n    leave: { opacity: 0, transform: \"scale(0.7)\" },\n  });\n\n  return (\n    <>\n      <AlertBoxLeft>\n        {transition\n          .filter((e) => e.item.position === AlertPosition.Left)\n          .map(({ item, props, key }) => (\n            <animated.div style={props} key={key}>\n              <Alert\n                id={item.id}\n                action={\n                  item.dismissible ? (\n                    <IconButton\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() =>\n                        dispatch(actions.alertCancelButtonClicked(item.id))\n                      }\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>\n                  ) : null\n                }\n              >\n                <AlertTitle>{item.title}</AlertTitle>\n                {item.message}\n              </Alert>\n            </animated.div>\n          ))}\n      </AlertBoxLeft>\n      <AlertBoxRight>\n        {transition\n          .filter((e) => e.item.position === AlertPosition.Right)\n          .map(({ item, props, key }) => (\n            <animated.div style={props} key={key}>\n              <Alert\n                id={item.id}\n                key={item.id}\n                action={\n                  item.dismissible ? (\n                    <IconButton\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() =>\n                        dispatch(actions.alertCancelButtonClicked(item.id))\n                      }\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>\n                  ) : null\n                }\n              >\n                <AlertTitle>{item.title}</AlertTitle>\n                {item.message}\n              </Alert>\n            </animated.div>\n          ))}\n      </AlertBoxRight>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./style.css\";\nimport { render } from \"react-dom\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { store } from \"./store\";\nimport { AlertPosition } from \"./store/index\";\nimport { actions } from \"./store/actions\";\nimport { v4 as uuid } from \"uuid\";\nimport { Form } from \"./style\";\nimport { NotificationContainer } from \"./components/NotificationContainer\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  MenuItem,\n  Select,\n  TextField,\n  FormHelperText,\n  Box,\n  Typography,\n} from \"@material-ui/core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\n\ntype Inputs = {\n  title: string;\n  message: string;\n  dismissible: boolean;\n  durationAllowed: boolean;\n  duration: number;\n  position: number;\n};\n\nfunction App() {\n  const dispatch = useDispatch();\n  const positions = Object.keys(AlertPosition).filter(\n    (value) => !isNaN(Number(value))\n  );\n  const { control, handleSubmit, watch } = useForm<Inputs>({\n    defaultValues: {\n      title: \"Welcome!\",\n      message: \"Thanks for checking out my project.\",\n      dismissible: true,\n      durationAllowed: false,\n      duration: 5000,\n      position: 0,\n    },\n  });\n  const onSubmit = (data: Inputs) => {\n    if (data.durationAllowed || data.dismissible) {\n      dispatch(\n        actions.alertCreated({\n          id: uuid(),\n          title: data.title,\n          message: data.message,\n          duration: data.durationAllowed ? data.duration : undefined,\n          dismissible: data.dismissible,\n          position: data.position,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Box\n        display=\"flex\"\n        // justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n        flexDirection=\"column\"\n      >\n        <NotificationContainer />\n        <Box margin=\"20px\">\n          <Typography variant=\"h3\" align=\"center\" component=\"h1\" gutterBottom>\n            <NotificationImportantIcon fontSize=\"large\" color=\"primary\" />\n            SagaAlert\n          </Typography>\n          <Typography paragraph gutterBottom>\n            This project highlights how easy it is to create a notification\n            system using Redux Saga.\n          </Typography>\n        </Box>\n        <Form onSubmit={handleSubmit(onSubmit)} style={{ background: \"#fff\" }}>\n          <FormControl margin=\"normal\">\n            <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n              Title\n            </FormLabel>\n            <Controller\n              name=\"title\"\n              control={control}\n              defaultValue=\"\"\n              render={({ onChange, value }) => (\n                <TextField\n                  placeholder=\"Placeholder\"\n                  fullWidth\n                  onChange={onChange}\n                  value={value}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              )}\n            />\n          </FormControl>\n          <FormControl margin=\"normal\">\n            <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n              Message\n            </FormLabel>\n            <Controller\n              name=\"message\"\n              control={control}\n              defaultValue=\"\"\n              render={({ onChange, value }) => (\n                <TextField\n                  placeholder=\"Placeholder\"\n                  fullWidth\n                  onChange={onChange}\n                  value={value}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              )}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"normal\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              flexDirection: \"row\",\n            }}\n          >\n            <FormControlLabel\n              control={\n                <Controller\n                  name=\"durationAllowed\"\n                  control={control}\n                  render={(props) => (\n                    <Checkbox\n                      {...props}\n                      color=\"primary\"\n                      checked={props.value}\n                      onChange={(e) => props.onChange(e.target.checked)}\n                    />\n                  )}\n                />\n              }\n              label=\"Duration?\"\n            />\n            <FormControlLabel\n              control={\n                <Controller\n                  name=\"dismissible\"\n                  control={control}\n                  render={(props) => (\n                    <Checkbox\n                      {...props}\n                      color=\"secondary\"\n                      checked={props.value}\n                      onChange={(e) => props.onChange(e.target.checked)}\n                    />\n                  )}\n                />\n              }\n              label=\"Dismissible?\"\n            />\n          </FormControl>\n          {!watch(\"durationAllowed\") && !watch(\"dismissible\") && (\n            <FormHelperText>\n              Expires or Dismissible must be allowed\n            </FormHelperText>\n          )}\n          <FormControl margin=\"normal\">\n            <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n              Duration\n            </FormLabel>\n            <Controller\n              name=\"duration\"\n              control={control}\n              defaultValue=\"\"\n              render={({ onChange, value }) => (\n                <TextField\n                  placeholder=\"Placeholder\"\n                  fullWidth\n                  type=\"number\"\n                  onChange={onChange}\n                  disabled={!watch(\"duration\")}\n                  value={value}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              )}\n            />\n          </FormControl>\n          <FormControl margin=\"normal\">\n            <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n              Position\n            </FormLabel>\n            <Controller\n              name=\"position\"\n              control={control}\n              render={({ onChange, value }) => (\n                <Select\n                  variant=\"outlined\"\n                  value={positions[value]}\n                  onChange={onChange}\n                >\n                  {positions.map((key, index) => (\n                    <MenuItem key={key} value={index}>\n                      {AlertPosition[key as any]}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormControl>\n          <FormControl margin=\"normal\">\n            <Button\n              fullWidth\n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={!watch(\"duration\") && !watch(\"dismissible\")}\n            >\n              Create\n            </Button>\n          </FormControl>\n        </Form>\n      </Box>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}