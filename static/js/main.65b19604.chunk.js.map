{"version":3,"sources":["store/actions.ts","store/saga.js","store/rootSaga.ts","store/index.tsx","store/types.ts","components/NotificationContainer/style.tsx","components/NotificationContainer/index.tsx","components/Form/style.ts","components/Form/index.tsx","index.tsx"],"names":["actions","alertCreated","createAction","alertDisplayed","alertCancelButtonClicked","alertCleared","cancellationSaga","addAlertSaga","id","take","payload","put","duration","race","delay","click","console","log","rootSaga","all","takeEvery","getType","sagaMiddleware","createSagaMiddleware","store","createStore","state","alerts","action","produce","draft","type","filter","alert","composeWithDevTools","applyMiddleware","run","AlertPosition","AlertType","useTypedSelector","useSelector","AlertBox","styled","div","AlertBoxLeft","AlertBoxRight","AlertWrapper","animated","NotificationContainer","dispatch","useDispatch","transition","useTransition","item","unique","trail","length","from","opacity","transform","enter","leave","e","position","Left","map","props","key","style","Alert","variant","severity","dismissible","IconButton","color","size","onClick","fontSize","AlertTitle","title","message","Right","FormWrapper","form","alertTypeConverter","index","AlertForm","positions","Object","keys","value","isNaN","Number","alertTypes","useForm","defaultValues","durationAllowed","alertType","control","handleSubmit","watch","onSubmit","data","uuid","undefined","background","FormControl","margin","FormLabel","marginBottom","name","defaultValue","render","onChange","TextField","placeholder","fullWidth","InputLabelProps","shrink","display","justifyContent","flexDirection","FormControlLabel","Checkbox","checked","target","label","FormHelperText","disabled","Select","MenuItem","Button","App","className","Box","alignItems","minHeight","Typography","align","component","gutterBottom","paragraph","rootElement","document","getElementById"],"mappings":"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","file":"static/js/main.65b19604.chunk.js","sourcesContent":["import { ActionType, createAction } from \"typesafe-actions\";\nimport { Alert } from \"./types\";\n\nconst alertCreated = createAction(\"alert created\")<Alert>();\nconst alertDisplayed = createAction(\"alert displayed\")<Alert>();\nconst alertCancelButtonClicked = createAction(\"alert cancel button clicked\")<\n  string\n>();\nconst alertCleared = createAction(\"alert cleared\")<string>();\n\nexport const actions = {\n  alertCreated,\n  alertDisplayed,\n  alertCancelButtonClicked,\n  alertCleared\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import { put, delay, take, race } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\n\nfunction* cancellationSaga(id) {\n  while (true) {\n    const { payload } = yield take(actions.alertCancelButtonClicked);\n    if (id === payload) return;\n  }\n}\n\nexport function* addAlertSaga({ payload }) {\n  try {\n    yield put(actions.alertDisplayed(payload));\n    if (payload.duration) {\n      yield race({\n        delay: delay(payload.duration),\n        click: cancellationSaga(payload.id)\n      });\n    } else {\n      yield race({\n        click: cancellationSaga(payload.id)\n      });\n    }\n\n    yield put(actions.alertCleared(payload.id));\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { getType } from \"typesafe-actions\";\nimport { all, takeEvery } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\nimport { addAlertSaga } from \"./saga\";\n\nexport function* rootSaga() {\n  yield all([takeEvery(getType(actions.alertCreated), addAlertSaga)]);\n}\n","import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore, applyMiddleware } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { rootSaga } from \"./rootSaga\";\nimport { Alert } from \"./types\";\n\nconst initialState = () => ({\n  alerts: [] as Alert[],\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case getType(actions.alertDisplayed):\n        draft.alerts = [...draft.alerts, action.payload];\n        break;\n      case getType(actions.alertCleared):\n        draft.alerts = draft.alerts.filter(\n          (alert) => alert.id !== action.payload\n        );\n        break;\n    }\n  });\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","export enum AlertPosition {\n    Right = 0,\n    Left = 1,\n  }\n  \n  export type Alert = {\n    id: string;\n    title: string;\n    message: string;\n    duration: number | undefined;\n    dismissible: boolean;\n    position: AlertPosition;\n    type: string;\n  };\n  \nexport enum AlertType {\n    Success = 0,\n    Info = 1,\n    Warning = 2,\n    Error = 3,\n  }","import styled from \"styled-components\";\nimport { animated } from \"react-spring\";\n\nconst AlertBox = styled.div`\n  position: absolute;\n  top: 0;\n  padding: 0;\n  margin: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const AlertBoxLeft = styled(AlertBox)`\n  align-items: flex-start;\n  left: 0;\n`;\nexport const AlertBoxRight = styled(AlertBox)`\n  align-items: flex-end;\n  right: 0;\n`;\n\nexport const AlertWrapper = styled(animated.div)`\n  margin-bottom: 5px;\n  z-index: 2;\n`;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Alert, AlertTitle, Color } from \"@material-ui/lab\";\nimport { useTypedSelector } from \"../../store\";\nimport { actions } from \"../../store/actions\";\nimport { AlertBoxLeft, AlertBoxRight, AlertWrapper } from \"./style\";\nimport { useTransition } from \"react-spring\";\nimport { AlertPosition } from \"../../store/types\";\n\nexport const NotificationContainer = () => {\n  const dispatch = useDispatch();\n  const alerts = useTypedSelector((state) => state.alerts);\n  const transition = useTransition(alerts, (item) => item.id, {\n    unique: true,\n    trail: 400 / alerts.length,\n    from: { opacity: 0, transform: \"scale(0.7)\" },\n    enter: { opacity: 1, transform: \"scale(1)\" },\n    leave: { opacity: 0, transform: \"scale(0.7)\" },\n  });\n\n  return (\n    <>\n      <AlertBoxLeft>\n        {transition\n          .filter((e) => e.item.position === AlertPosition.Left)\n          .map(({ item, props, key }) => (\n            <AlertWrapper style={props} key={key}>\n              <Alert\n                id={item.id}\n                variant=\"filled\"\n                severity={item.type as Color}\n                action={\n                  item.dismissible ? (\n                    <IconButton\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() =>\n                        dispatch(actions.alertCancelButtonClicked(item.id))\n                      }\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>\n                  ) : null\n                }\n              >\n                <AlertTitle>{item.title}</AlertTitle>\n                {item.message}\n              </Alert>\n            </AlertWrapper>\n          ))}\n      </AlertBoxLeft>\n      <AlertBoxRight>\n        {transition\n          .filter((e) => e.item.position === AlertPosition.Right)\n          .map(({ item, props, key }) => (\n            <AlertWrapper style={props} key={key}>\n              <Alert\n                id={item.id}\n                variant=\"filled\"\n                severity={item.type as Color}\n                action={\n                  item.dismissible ? (\n                    <IconButton\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() =>\n                        dispatch(actions.alertCancelButtonClicked(item.id))\n                      }\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>\n                  ) : null\n                }\n              >\n                <AlertTitle>{item.title}</AlertTitle>\n                {item.message}\n              </Alert>\n            </AlertWrapper>\n          ))}\n      </AlertBoxRight>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.form`\n  padding: 20px;\n  display: grid;\n  box-shadow: 1px 7px 14px -5px rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n  color: rgba(42, 42, 42, 1);\n  max-width: 330px;\n`;","import React from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  MenuItem,\n  Select,\n  TextField,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { Color } from \"@material-ui/lab\";\nimport { AlertPosition, AlertType } from \"../../store/types\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../store/actions\";\nimport { FormWrapper } from \"./style\";\n\ntype Inputs = {\n  title: string;\n  message: string;\n  dismissible: boolean;\n  durationAllowed: boolean;\n  duration: number;\n  position: number;\n  alertType: number;\n};\n\nconst alertTypeConverter = (index: number): Color => {\n  switch (index) {\n    case 0:\n      return \"success\";\n    case 1:\n      return \"info\";\n    case 2:\n      return \"warning\";\n    case 3:\n      return \"error\";\n    case 4:\n    default:\n      return \"success\";\n  }\n};\nexport const AlertForm = () => {\n  const dispatch = useDispatch();\n  const positions = Object.keys(AlertPosition).filter(\n    (value) => !isNaN(Number(value))\n  );\n  const alertTypes = Object.keys(AlertType).filter(\n    (value) => !isNaN(Number(value))\n  );\n\n  const { control, handleSubmit, watch } = useForm<Inputs>({\n    defaultValues: {\n      title: \"Welcome!\",\n      message: \"Thanks for checking out my project.\",\n      dismissible: true,\n      durationAllowed: false,\n      duration: 5000,\n      position: 0,\n      alertType: 0,\n    },\n  });\n\n  const onSubmit = (data: Inputs) => {\n    if (data.durationAllowed || data.dismissible) {\n      dispatch(\n        actions.alertCreated({\n          id: uuid(),\n          title: data.title,\n          message: data.message,\n          duration: data.durationAllowed ? data.duration : undefined,\n          dismissible: data.dismissible,\n          position: data.position,\n          type: alertTypeConverter(data.alertType),\n        })\n      );\n    }\n  };\n\n  return (\n    <FormWrapper\n      onSubmit={handleSubmit(onSubmit)}\n      style={{ background: \"#fff\" }}\n    >\n      <FormControl margin=\"normal\">\n        <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n          Title\n        </FormLabel>\n        <Controller\n          name=\"title\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              placeholder=\"Placeholder\"\n              fullWidth\n              onChange={onChange}\n              value={value}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          )}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n          Message\n        </FormLabel>\n        <Controller\n          name=\"message\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              placeholder=\"Placeholder\"\n              fullWidth\n              onChange={onChange}\n              value={value}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          )}\n        />\n      </FormControl>\n      <FormControl\n        margin=\"normal\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexDirection: \"row\",\n        }}\n      >\n        <FormControlLabel\n          control={\n            <Controller\n              name=\"durationAllowed\"\n              control={control}\n              render={(props) => (\n                <Checkbox\n                  {...props}\n                  color=\"primary\"\n                  checked={props.value}\n                  onChange={(e) => props.onChange(e.target.checked)}\n                />\n              )}\n            />\n          }\n          label=\"Duration?\"\n        />\n        <FormControlLabel\n          control={\n            <Controller\n              name=\"dismissible\"\n              control={control}\n              render={(props) => (\n                <Checkbox\n                  {...props}\n                  color=\"secondary\"\n                  checked={props.value}\n                  onChange={(e) => props.onChange(e.target.checked)}\n                />\n              )}\n            />\n          }\n          label=\"Dismissible?\"\n        />\n      </FormControl>\n      {!watch(\"durationAllowed\") && !watch(\"dismissible\") && (\n        <FormHelperText>Expires or Dismissible must be allowed</FormHelperText>\n      )}\n      <FormControl margin=\"normal\">\n        <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n          Duration\n        </FormLabel>\n        <Controller\n          name=\"duration\"\n          control={control}\n          defaultValue=\"\"\n          render={({ onChange, value }) => (\n            <TextField\n              placeholder=\"Placeholder\"\n              fullWidth\n              type=\"number\"\n              onChange={onChange}\n              disabled={!watch(\"duration\")}\n              value={value}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          )}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n          Position\n        </FormLabel>\n        <Controller\n          name=\"position\"\n          control={control}\n          render={({ onChange, value }) => (\n            <Select\n              variant=\"outlined\"\n              value={positions[value]}\n              onChange={onChange}\n            >\n              {positions.map((key, index) => (\n                <MenuItem key={key} value={index}>\n                  {AlertPosition[key as any]}\n                </MenuItem>\n              ))}\n            </Select>\n          )}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <FormLabel style={{ marginBottom: \"4px\", fontSize: \"14px\" }}>\n          Alert Type\n        </FormLabel>\n        <Controller\n          name=\"alertType\"\n          control={control}\n          render={({ onChange, value }) => (\n            <Select\n              variant=\"outlined\"\n              value={alertTypes[value]}\n              onChange={onChange}\n            >\n              {alertTypes.map((key, index) => (\n                <MenuItem key={key} value={index}>\n                  {AlertType[key as any]}\n                </MenuItem>\n              ))}\n            </Select>\n          )}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <Button\n          fullWidth\n          color=\"primary\"\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={!watch(\"duration\") && !watch(\"dismissible\")}\n        >\n          Create\n        </Button>\n      </FormControl>\n    </FormWrapper>\n  );\n};\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { NotificationContainer } from \"./components/NotificationContainer\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\nimport { AlertForm } from \"./components/Form\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n        flexDirection=\"column\"\n      >\n        <NotificationContainer />\n        <Box margin=\"20px\">\n          <Typography variant=\"h3\" align=\"center\" component=\"h1\" gutterBottom>\n            <NotificationImportantIcon fontSize=\"large\" color=\"primary\" />\n            SagaAlert\n          </Typography>\n          <Typography paragraph gutterBottom>\n            This project highlights a notification system implemented using\n            Redux Saga.\n          </Typography>\n        </Box>\n        <AlertForm />\n      </Box>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}