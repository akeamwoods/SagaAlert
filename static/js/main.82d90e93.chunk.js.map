{"version":3,"sources":["store/actions.ts","store/saga.js","store/index.tsx","store/rootSaga.ts","components/alert/style.tsx","components/alert/index.tsx","components/alert/container.tsx","style.tsx","index.tsx"],"names":["actions","alertCreated","createAction","alertDisplayed","alertCancelButtonClicked","alertCleared","cancellationSaga","addAlertSaga","id","take","payload","put","duration","race","delay","click","console","log","AlertPosition","rootSaga","all","takeEvery","getType","initialState","title","message","undefined","dismissible","position","right","alerts","sagaMiddleware","createSagaMiddleware","store","createStore","state","action","produce","draft","type","filter","alert","composeWithDevTools","applyMiddleware","run","useTypedSelector","useSelector","AlertBox","styled","div","AlertBoxLeft","AlertBoxRight","NotificationWrapper","animated","Notification","onClick","clickable","style","size","display","flexDirection","marginLeft","color","NotificationContainer","dispatch","useDispatch","transition","useTransition","item","unique","trail","length","from","opacity","transform","enter","leave","e","map","props","key","FormWrapper","form","Form","rootElement","document","getElementById","render","positions","Object","keys","value","isNaN","Number","useState","setTitle","setMessage","durationAllowed","setDurationAllowed","setDuration","setDismissible","setIndex","useEffect","className","onChange","target","checked","disabled","selectedIndex","uuid","v4"],"mappings":"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","file":"static/js/main.82d90e93.chunk.js","sourcesContent":["import { ActionType, createAction } from \"typesafe-actions\";\nimport { Alert } from \".\";\n\nconst alertCreated = createAction(\"alert created\")<Alert>();\nconst alertDisplayed = createAction(\"alert displayed\")<Alert>();\nconst alertCancelButtonClicked = createAction(\"alert cancel button clicked\")<\n  string\n>();\nconst alertCleared = createAction(\"alert cleared\")<string>();\n\nexport const actions = {\n  alertCreated,\n  alertDisplayed,\n  alertCancelButtonClicked,\n  alertCleared\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import { put, delay, take, race } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\n\nfunction* cancellationSaga(id) {\n  while (true) {\n    const { payload } = yield take(actions.alertCancelButtonClicked);\n    if (id === payload) return;\n  }\n}\n\nexport function* addAlertSaga({ payload }) {\n  try {\n    yield put(actions.alertDisplayed(payload));\n    if (payload.duration) {\n      yield race({\n        delay: delay(payload.duration),\n        click: cancellationSaga(payload.id)\n      });\n    } else {\n      yield race({\n        click: cancellationSaga(payload.id)\n      });\n    }\n\n    yield put(actions.alertCleared(payload.id));\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore, applyMiddleware } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { rootSaga } from \"./rootSaga\";\n\nexport enum AlertPosition {\n  right = 0,\n  left = 1\n}\nexport type Alert = {\n  id: string;\n  title: string;\n  message: string;\n  duration: number | undefined;\n  dismissible: boolean;\n  position: AlertPosition;\n};\n\nconst initialState = () => ({\n  title: \"\",\n  message: \"\",\n  duration: undefined as undefined | number,\n  dismissible: true,\n  position: AlertPosition.right as AlertPosition,\n  alerts: [] as Alert[]\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case getType(actions.alertDisplayed):\n        draft.alerts = [...draft.alerts, action.payload];\n        break;\n      case getType(actions.alertCleared):\n        draft.alerts = draft.alerts.filter(\n          alert => alert.id !== action.payload\n        );\n        break;\n    }\n  });\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","import { getType } from \"typesafe-actions\";\nimport { all, takeEvery } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\nimport { addAlertSaga } from \"./saga\";\n\nexport function* rootSaga() {\n  yield all([takeEvery(getType(actions.alertCreated), addAlertSaga)]);\n}\n","import styled from \"styled-components\";\nimport { animated } from \"react-spring\";\n\nconst AlertBox = styled.div`\n  position: absolute;\n  top: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const AlertBoxLeft = styled(AlertBox)`\n  left: 0;\n`;\nexport const AlertBoxRight = styled(AlertBox)`\n  right: 0;\n`;\n\nexport const NotificationWrapper = styled(animated.div)`\n  position: relative;\n  margin: 10px 10px 0 10px;\n  max-width: 300px;\n  padding: 20px;\n  background: #ffffff;\n  color: black;\n  display: flex;\n  flex-direction: row;\n  z-index: 10;\n  box-shadow: 1px 7px 14px -5px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  font-size: 0.8em;\n  text-align: left;\n  align-items: center;\n\n  button {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    background: none;\n    padding: 0;\n    margin: 0;\n    border: none;\n    cursor: pointer;\n  }\n\n  :before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px;\n    background-color: rgb(0, 140, 186);\n  }\n`;\n","import React from \"react\";\nimport { FaTimesCircle, FaExclamationTriangle } from \"react-icons/fa\";\nimport { NotificationWrapper } from \"./style\";\n\nexport const Notification: React.FC<{\n  title: string;\n  message: string;\n  clickable?: boolean;\n  style?: React.CSSProperties;\n  onClick?: () => {};\n}> = ({ title, message, onClick, clickable, style }) => {\n  return (\n    <NotificationWrapper style={style}>\n      {clickable && onClick ? (\n        <button onClick={onClick}>\n          <FaTimesCircle size=\"16\" />\n        </button>\n      ) : null}\n      <FaExclamationTriangle size=\"16\" />\n      <div\n        style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"15px\" }}\n      >\n        <div>{title}</div>\n        <div style={{ color: \"#878787\" }}>{message}</div>\n      </div>\n    </NotificationWrapper>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../store\";\nimport { Notification } from \".\";\nimport { actions } from \"../../store/actions\";\nimport { useTransition } from \"react-spring\";\nimport { AlertBoxLeft, AlertBoxRight } from \"./style\";\n\nexport const NotificationContainer = () => {\n  const dispatch = useDispatch();\n  const alerts = useTypedSelector(state => state.alerts);\n  const transition = useTransition(alerts, item => item.id, {\n    unique: true,\n    trail: 400 / alerts.length,\n    from: { opacity: 0, transform: \"scale(0.7)\" },\n    enter: { opacity: 1, transform: \"scale(1)\" },\n    leave: { opacity: 0, transform: \"scale(0.7)\" }\n  });\n\n  return (\n    <>\n      <AlertBoxLeft>\n        {transition\n          .filter(e => e.item.position === 1)\n          .map(({ item, props, key }) => (\n            <Notification\n              style={props}\n              key={key}\n              title={item.title}\n              message={item.message}\n              clickable={item.dismissible}\n              onClick={() =>\n                dispatch(actions.alertCancelButtonClicked(item.id))\n              }\n            />\n          ))}\n      </AlertBoxLeft>\n      <AlertBoxRight>\n        {transition\n          .filter(e => e.item.position === 0)\n          .map(({ item, props, key }) => (\n            <Notification\n              style={props}\n              key={key}\n              title={item.title}\n              message={item.message}\n              clickable={item.dismissible}\n              onClick={() =>\n                dispatch(actions.alertCancelButtonClicked(item.id))\n              }\n            />\n          ))}\n      </AlertBoxRight>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Form = styled.form`\n  padding: 20px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 10px;\n  background: rgb(255, 255, 255, 1);\n  box-shadow: 1px 7px 14px -5px rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n  color: rgba(42, 42, 42, 1);\n\n  input {\n    padding: 5px;\n    border: rgba(210, 210, 210, 1) solid 1px;\n  }\n  span {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n  .first {\n    grid-column: 1/3;\n    grid-row: 1;\n  }\n  .second {\n    grid-column: 1/3;\n    grid-row: 2;\n  }\n  .third {\n    grid-column: 1/2;\n    grid-row: 3;\n    justify-content: space-between;\n    span {\n      flex-direction: row;\n      align-items: flex-end;\n    }\n  }\n  .fourth {\n    grid-column: 2/3;\n    grid-row: 3;\n  }\n  .fifth {\n    grid-column: 1/3;\n    grid-row: 4;\n  }\n  .sixth {\n    grid-column: 1/3;\n    grid-row: 5;\n    color: red;\n    text-align: center;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport { render } from \"react-dom\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { store } from \"./store\";\nimport { AlertPosition } from \"./store/index\";\nimport { actions } from \"./store/actions\";\nimport { NotificationContainer } from \"./components/alert/container\";\nimport uuid from \"uuid\";\nimport { Form, FormWrapper } from \"./style\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const positions = Object.keys(AlertPosition).filter(\n    value => !isNaN(Number(value))\n  );\n\n  const [title, setTitle] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [durationAllowed, setDurationAllowed] = useState(true);\n  const [duration, setDuration] = useState(0);\n  const [dismissible, setDismissible] = useState(true);\n  const [position, setIndex] = useState(0);\n\n  useEffect(() => {\n    setTitle(\"Title\");\n    setMessage(\"Message\");\n    setDurationAllowed(true);\n    setDuration(5000);\n    setDismissible(true);\n    setIndex(0);\n  }, []);\n\n  const onSubmit = () => {\n    if (durationAllowed || dismissible) {\n      dispatch(\n        actions.alertCreated({\n          id: uuid.v4(),\n          title,\n          message,\n          duration: durationAllowed ? duration : undefined,\n          dismissible,\n          position\n        })\n      );\n    } else {\n      // validation here (need either a set duration or dissmissible);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <NotificationContainer />\n      <FormWrapper>\n        <Form>\n          <span className=\"first\">\n            <label>Title</label>\n            <input\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n            ></input>\n          </span>\n          <span className=\"second\">\n            <label>Message</label>\n            <input\n              value={message}\n              onChange={e => setMessage(e.target.value)}\n            ></input>\n          </span>\n          <span className=\"third\">\n            <span>\n              <label>Expires?</label>\n              <input\n                checked={durationAllowed}\n                onChange={() => setDurationAllowed(!durationAllowed)}\n                type=\"checkbox\"\n              ></input>\n            </span>\n            <span>\n              <label>Dismissible?</label>\n              <input\n                checked={dismissible}\n                onChange={() => setDismissible(!dismissible)}\n                type=\"checkbox\"\n              ></input>\n            </span>\n          </span>\n          <span className=\"fourth\">\n            <label>Duration (ms)</label>\n            <input\n              disabled={!durationAllowed}\n              value={duration}\n              onChange={e => setDuration(Number(e.target.value))}\n              type=\"number\"\n            ></input>\n          </span>\n          <span className=\"fifth\">\n            <label>Position</label>\n            <select\n              value={positions[position]}\n              onChange={e => setIndex(e.target.selectedIndex)}\n            >\n              {positions.map(key => (\n                <option value={key}>{AlertPosition[key as any]}</option>\n              ))}\n            </select>\n          </span>\n          {!durationAllowed && !dismissible && (\n            <span className=\"sixth\">\n              <p>Expires or Dismissible must be allowed.</p>\n            </span>\n          )}\n          <label></label>\n\n          <button\n            type=\"button\"\n            onClick={onSubmit}\n            disabled={!durationAllowed && !dismissible}\n          >\n            Create\n          </button>\n        </Form>\n      </FormWrapper>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}